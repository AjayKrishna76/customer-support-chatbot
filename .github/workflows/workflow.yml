name: CI/CD Pipeline

on:
  #pull_request:
  #  branches:
  #    - DEV
  #push:
  #  branches:
  #    - DEV

jobs:
  DEV:
    runs-on: ubuntu-latest
    environment: DEV
    env:
      ENV_FILE: .env.dev

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Check Code Standards
      run: |
        flake8 src tests    

    - name: Run Unit Tests with Coverage
      env:
        PYTHONPATH: ${{ github.workspace }}/src
      run: |
        pytest --cov=src --cov-report=xml --cov-report=html

    - name: Run Bulk Test
      env:
        PYTHONPATH: ${{ github.workspace }}/src
      run: |
        python tests/bulk_test_chatbot.py
    
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: test-results
        path: reports/

    - name: Upload Coverage Report
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: coverage-report
        path: htmlcov/
    
    - name: Deploy to Test Environment
      run: |
        docker-compose -f docker-compose.yml -f docker-compose.test.yml up --build -d
  
    - name: Run Tests in Test Environment
      run: |
        docker-compose -f docker-compose.yml -f docker-compose.test.yml run test

  TEST:
    runs-on: ubuntu-latest
    environment: TEST
    needs: DEV
    env:
      ENV_FILE: .env.test

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Check Code Standards
      run: |
        flake8 src tests    

    - name: Run Unit Tests with Coverage
      env:
        PYTHONPATH: ${{ github.workspace }}/src
      run: |
        pytest --cov=src --cov-report=xml --cov-report=html

    - name: Run Bulk Test
      env:
        PYTHONPATH: ${{ github.workspace }}/src
      run: |
        python tests/bulk_test_chatbot.py
    
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: test-results
        path: reports/

    - name: Upload Coverage Report
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: coverage-report
        path: htmlcov/
    
    - name: Deploy to Test Environment
      run: |
        docker-compose -f docker-compose.yml -f docker-compose.test.yml up --build -d
  
    - name: Run Tests in Test Environment
      run: |
        docker-compose -f docker-compose.yml -f docker-compose.test.yml run test

  PROD:
    runs-on: ubuntu-latest
    environment: PROD
    needs: TEST
    env:
      ENV_FILE: .env.prod
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose

    - name: Await Approval
      uses: actions/github-script@v4
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: review } = await github.pulls.createReview({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.payload.pull_request.number,
            event: 'APPROVE'
          });
          console.log(review);

    - name: Deploy to Production Environment
      if: success()
      run: |
        docker-compose -f docker-compose.yml -f docker-compose.prod.yml up --build -d
